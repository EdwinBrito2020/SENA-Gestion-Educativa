// src/lib/pdf-utils.ts - TODO CON Uint8Array
import { PDFDocument, PDFForm } from 'pdf-lib';
import { FullDocumentData, GeneratedDocuments } from './types';

export async function generateDocuments(
  data: FullDocumentData,
  actaPdfBuffer: Uint8Array,
  tratamientoPdfBuffer: Uint8Array
): Promise<GeneratedDocuments> {
  
  console.log('[PDF Utils] Iniciando generación de documentos...');
  console.log('[PDF Utils] Tamaño buffer acta:', actaPdfBuffer.length, 'bytes');
  console.log('[PDF Utils] Tamaño buffer tratamiento:', tratamientoPdfBuffer.length, 'bytes');

  try {
    // PASO 1: Generar el Acta de Compromiso
    const actaResult = await fillActaCompromiso(data, actaPdfBuffer);

    // PASO 2: Verificar si es necesario generar el Tratamiento de Datos
    const esMenorDeEdad = data.tipo_documento_aprendiz === 'TI';
    console.log(`[PDF Utils] ¿Es menor de edad (TI)?: ${esMenorDeEdad}`);

    // PASO 3: Generar Tratamiento de Datos solo si es menor de edad
    let tratamientoResult: { buffer: Uint8Array; filename: string } | undefined;
    if (esMenorDeEdad) {
      tratamientoResult = await fillTratamientoDatos(data, tratamientoPdfBuffer);
    }

    // PASO 4: Construir y retornar el resultado
    const result: GeneratedDocuments = {
      actaCompromiso: actaResult,
      tratamientoDatos: tratamientoResult,
    };

    console.log('[PDF Utils] Generación completada exitosamente');
    return result;

  } catch (error) {
    console.error('[PDF Utils] Error en generateDocuments:', error);
    throw error;
  }
}

async function fillActaCompromiso(
  data: FullDocumentData,
  pdfBuffer: Uint8Array
): Promise<{ buffer: Uint8Array; filename: string }> {
  
  console.log('[Acta Compromiso] Iniciando llenado del formulario...');

  try {
    // PASO 1: Cargar el PDF base CON DEBUGGING
    console.log('[Acta Compromiso] Intentando cargar PDF base...');
    let pdfDoc;
    try {
      pdfDoc = await PDFDocument.load(pdfBuffer);
      console.log('[Acta Compromiso] ✅ PDF base cargado exitosamente');
      console.log('[Acta Compromiso] Número de páginas:', pdfDoc.getPages().length);
    } catch (error) {
      console.error('[Acta Compromiso] ❌ ERROR al cargar PDF base:', error);
      throw new Error(`No se pudo cargar el PDF base: ${error}`);
    }

    const form = pdfDoc.getForm();

    // DEBUG: Listar todos los campos disponibles
    const fields = form.getFields();
    console.log('[Acta Compromiso] Campos disponibles:', fields.map(f => f.getName()));

    // PASO 2: Llenar campos de texto básicos del aprendiz
    setTextField(form, 'nombre_aprendiz', data.nombre_aprendiz);
    
    if (data.cual_tipo_id_aprendiz) {
      setTextField(form, 'cual_tipo_id_aprendiz', data.cual_tipo_id_aprendiz);
    }
    
    setTextField(form, 'numero_documento_aprendiz', data.numero_documento_aprendiz);

    // PASO 3: Marcar el tipo de documento correspondiente (checkboxes)
    setCheckboxByDocumentType(form, data.tipo_documento_aprendiz);

    // PASO 4: Llenar datos del programa de formación
    setTextField(form, 'programa_formacion', data.programa_formacion);
    setTextField(form, 'numero_ficha', data.numero_ficha);
    setTextField(form, 'centro_formacion', data.centro_formacion);

    // PASO 5: Llenar datos del tutor
    setTextField(form, 'tipo_y_documento_tutor', data.tipo_documento_tutor);

    // PASO 6: Llenar la fecha
    setTextField(form, 'dia', data.dia);
    setTextField(form, 'mes', data.mes);
    setTextField(form, 'año', data.año);

    // PASO 7: Insertar las firmas (imágenes Base64)
    if (data.firma_aprendiz) {
      await insertSignatureImage(pdfDoc, form, 'firma_aprendiz', data.firma_aprendiz);
    }
    
    if (data.firma_tutor) {
      await insertSignatureImage(pdfDoc, form, 'firma_tutor', data.firma_tutor);
    }


    console.log('[Acta Compromiso] Campos llenados, guardando PDF...');


    // PASO 8: Aplanar el formulario (hacer campos no editables)
    form.flatten();

    // PASO 9: Guardar el PDF modificado - esto retorna Uint8Array
    const pdfBytes = await pdfDoc.save();


    // PASO 10: Construir el nombre del archivo
    const filename = `acta_compromiso_${data.numero_documento_aprendiz}.pdf`;

    console.log(`[Acta Compromiso] Documento generado: ${filename}`);
    
    // RETORNAR Uint8Array directamente
    return { buffer: pdfBytes, filename };

  } catch (error) {
    console.error('[Acta Compromiso] Error al generar documento:', error);
    throw new Error(`Error al generar Acta de Compromiso: ${error}`);
  }
}

async function fillTratamientoDatos(
  data: FullDocumentData,
  pdfBuffer: Uint8Array
): Promise<{ buffer: Uint8Array; filename: string }> {
  
  console.log('[Tratamiento Datos] Iniciando llenado del formulario...');

  try {
    // PASO 1: Cargar el PDF base CON DEBUGGING
    console.log('[Tratamiento Datos] Intentando cargar PDF base...');
    let pdfDoc;
    try {
      pdfDoc = await PDFDocument.load(pdfBuffer);
      console.log('[Tratamiento Datos] ✅ PDF base cargado exitosamente');
      console.log('[Tratamiento Datos] Número de páginas:', pdfDoc.getPages().length);
    } catch (error) {
      console.error('[Tratamiento Datos] ❌ ERROR al cargar PDF base:', error);
      throw new Error(`No se pudo cargar el PDF base: ${error}`);
    }

    const form = pdfDoc.getForm();

    // DEBUG: Listar campos disponibles
    const fields = form.getFields();
    console.log('[Tratamiento Datos] Campos disponibles:', fields.map(f => f.getName()));

    // PASO 2: Llenar datos institucionales y de ubicación
    setTextField(form, 'fecha', data.fecha);
    setTextField(form, 'ciudad', data.ciudad);
    setTextField(form, 'regional', data.regional);
    setTextField(form, 'centro_formacion', data.centro_formacion);

    // PASO 3: Llenar datos del programa de formación
    setTextField(form, 'programa_formacion', data.programa_formacion);
    setTextField(form, 'numero_ficha', data.numero_ficha);

    // PASO 4: Llenar datos del tutor legal
    setTextField(form, 'nombre_tutor', data.nombre_tutor);
    
    if (data.cc_tutor) {
      setTextField(form, 'cc_tutor', data.cc_tutor);
    }
    
    if (data.ce_tutor) {
      setTextField(form, 'ce_tutor', data.ce_tutor);
    }
    
    if (data.documento_tutor) {
      setTextField(form, 'documento_tutor', data.documento_tutor);
    }
    
    setTextField(form, 'municipio_documento_tutor', data.municipio_documento_tutor);
    setTextField(form, 'tipo_y_documento_tutor', data.tipo_documento_tutor);
    setTextField(form, 'correo_electronico_tutor', data.correo_electronico_tutor);
    setTextField(form, 'direccion_contacto_tutor', data.direccion_contacto_tutor);

    // PASO 5: Llenar datos del aprendiz (menor de edad)
    setTextField(form, 'nombre_aprendiz', data.nombre_aprendiz);
    setTextField(form, 'numero_documento_aprendiz', data.numero_documento_aprendiz);

    // PASO 6: Insertar las firmas (imágenes Base64)
    if (data.firma_aprendiz) {
      await insertSignatureImage(pdfDoc, form, 'firma_aprendiz', data.firma_aprendiz);
    }
    
    if (data.firma_tutor) {
      await insertSignatureImage(pdfDoc, form, 'firma_tutor', data.firma_tutor);
    }

    // PASO 7: Aplanar el formulario
    form.flatten();

    // PASO 8: Guardar el PDF modificado - retorna Uint8Array
    const pdfBytes = await pdfDoc.save();

    // PASO 9: Construir el nombre del archivo
    const filename = `tratamiento_datos_${data.numero_documento_aprendiz}.pdf`;

    console.log(`[Tratamiento Datos] Documento generado: ${filename}`);
    
    // RETORNAR Uint8Array directamente
    return { buffer: pdfBytes, filename };

  } catch (error) {
    console.error('[Tratamiento Datos] Error al generar documento:', error);
    throw new Error(`Error al generar Tratamiento de Datos: ${error}`);
  }
}

// ============================================================================
// 4. FUNCIONES AUXILIARES (se mantienen igual)
// ============================================================================

function setTextField(form: PDFForm, fieldName: string, value: string): void {
  try {
    const field = form.getTextField(fieldName);
    if (field) {
      field.setText(value || '');
      console.log(`[PDF Utils] Campo llenado: ${fieldName} = "${value}"`);
    } else {
      console.warn(`[PDF Utils] Campo no encontrado: ${fieldName}`);
    }
  } catch (error) {
    console.warn(`[PDF Utils] Error con campo ${fieldName}:`, error);
  }
}

function setCheckbox(form: PDFForm, fieldName: string): void {
  try {
    const checkbox = form.getCheckBox(fieldName);
    if (checkbox) {
      checkbox.check();
      console.log(`[PDF Utils] Checkbox marcado: ${fieldName}`);
    } else {
      console.warn(`[PDF Utils] Checkbox no encontrado: ${fieldName}`);
    }
  } catch (error) {
    console.warn(`[PDF Utils] Error con checkbox ${fieldName}:`, error);
  }
}

function setCheckboxByDocumentType(
  form: PDFForm,
  tipoDocumento: 'TI' | 'CC' | 'CE' | 'Otro'
): void {
  const checkboxMap: Record<string, string> = {
    'TI': 'tipo_tarjeta_aprendiz',
    'CC': 'tipo_cedula_aprendiz',
    'CE': 'tipo_CE_aprendiz',
    'Otro': 'tipo_otro_aprendiz',
  };

  const checkboxName = checkboxMap[tipoDocumento];
  if (checkboxName) {
    setCheckbox(form, checkboxName);
  } else {
    console.warn(`[PDF Utils] Tipo de documento no reconocido: ${tipoDocumento}`);
  }
}

async function insertSignatureImage(
  pdfDoc: PDFDocument,
  form: PDFForm,
  fieldName: string,
  base64Image: string
): Promise<void> {
  try {
    if (!base64Image) {
      console.warn(`[PDF Utils] Firma vacía para: ${fieldName}`);
      return;
    }

    const cleanBase64 = base64Image.replace(/^data:image\/(png|jpg|jpeg);base64,/, '');
    const imageBytes = Buffer.from(cleanBase64, 'base64');
    
    let image;
    if (base64Image.includes('data:image/png')) {
      image = await pdfDoc.embedPng(imageBytes);
    } else {
      image = await pdfDoc.embedJpg(imageBytes);
    }

    const field = form.getTextField(fieldName);
    if (!field) {
      console.warn(`[PDF Utils] Campo de firma no encontrado: ${fieldName}`);
      return;
    }

    const widgets = field.acroField.getWidgets();
    
    if (widgets.length === 0) {
      console.warn(`[PDF Utils] No se encontraron widgets para: ${fieldName}`);
      return;
    }

    const widget = widgets[0];
    const rect = widget.getRectangle();
    
    const fieldWidth = rect.width;
    const fieldHeight = rect.height;
    const imageAspectRatio = image.width / image.height;
    
    let drawWidth = fieldWidth;
    let drawHeight = fieldWidth / imageAspectRatio;
    
    if (drawHeight > fieldHeight) {
      drawHeight = fieldHeight;
      drawWidth = fieldHeight * imageAspectRatio;
    }

    const pageRef = widget.P();
    const pages = pdfDoc.getPages();
    const page = pages.find(p => p.ref === pageRef) || pages[0];
    
    page.drawImage(image, {
      x: rect.x + (fieldWidth - drawWidth) / 2,
      y: rect.y + (fieldHeight - drawHeight) / 2,
      width: drawWidth,
      height: drawHeight,
    });

    console.log(`[PDF Utils] Firma insertada correctamente: ${fieldName}`);
    
  } catch (error) {
    console.error(`[PDF Utils] Error al insertar firma ${fieldName}:`, error);
  }
}